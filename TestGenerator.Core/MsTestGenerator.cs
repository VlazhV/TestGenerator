using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestGenerator.Core
{
	public class MsTestGenerator 
	{
		CodeAnalysis codeAnalysis = new CodeAnalysis();

		BlockSyntax assertBlock = SyntaxFactory.Block
			(
				SyntaxFactory.ExpressionStatement
				( 
					SyntaxFactory.InvocationExpression
					( 
						SyntaxFactory.MemberAccessExpression
						(
							SyntaxKind.SimpleMemberAccessExpression,
							SyntaxFactory.IdentifierName( "Assert" ),
							SyntaxFactory.IdentifierName( "Fail" ) 
						) 
					)
					.WithArgumentList
					(
						SyntaxFactory.ArgumentList
						(
							SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>
							(
								SyntaxFactory.Argument
								(
									SyntaxFactory.LiteralExpression
									(
											SyntaxKind.StringLiteralExpression,
											SyntaxFactory.Literal( "autogenerated" ) 
									) 
								) 
							) 
						) 
					) 
				) 
			);

		SyntaxList<AttributeListSyntax> methodAttributeListSyntax = new SyntaxList<AttributeListSyntax>().Add(
												SyntaxFactory.AttributeList(
													new SeparatedSyntaxList<AttributeSyntax>().Add(
														SyntaxFactory.Attribute( SyntaxFactory.ParseName( "TestMethod" ) ) ) ) );


		SyntaxList<AttributeListSyntax> classAttributeListSyntax = new SyntaxList<AttributeListSyntax>().Add(
												SyntaxFactory.AttributeList(
													new SeparatedSyntaxList<AttributeSyntax>().Add(
														SyntaxFactory.Attribute( SyntaxFactory.ParseName( "TestClass" ) ) ) ) );


		//				FileName  Code
		public Dictionary<string, string> Generate( string code )
		{
			var root = CSharpSyntaxTree.ParseText( code ).GetRoot();
			codeAnalysis.Analyze( root );

			Dictionary<string, string> fileCodePairs = new();

			foreach (var namespaceName in codeAnalysis.FileStructure.Keys)
			{
				ClassDeclarationSyntax? classDeclaration = null;
				foreach (var className in codeAnalysis.FileStructure[ namespaceName].Keys)
				{
					SyntaxList<MemberDeclarationSyntax> methodDeclarations = new();
					foreach ( var methodName in codeAnalysis.FileStructure[ namespaceName ][ className ] ) 
					{
						methodDeclarations = methodDeclarations.Add( SyntaxFactory.MethodDeclaration( SyntaxFactory.ParseTypeName( "void" ), methodName + "Test" )
						.WithAttributeLists( methodAttributeListSyntax )
						.WithBody( assertBlock )
						.WithModifiers( new SyntaxTokenList().Add( SyntaxFactory.ParseToken( "public" ) ) ) );
					}
					classDeclaration = SyntaxFactory.ClassDeclaration( className + "Test" )
					.WithAttributeLists( classAttributeListSyntax )
					.WithMembers( methodDeclarations )
					.WithModifiers( new SyntaxTokenList().Add( SyntaxFactory.ParseToken( "public" ) ) );


					var namespaceDeclaration = SyntaxFactory.NamespaceDeclaration( SyntaxFactory.ParseName( namespaceName + ".Tests" ) );
					if ( classDeclaration != null )
						namespaceDeclaration = namespaceDeclaration.WithMembers( new SyntaxList<MemberDeclarationSyntax>().Add( classDeclaration ) );

					var usings = new SyntaxList<UsingDirectiveSyntax>();
					usings = usings.Add( SyntaxFactory.UsingDirective( SyntaxFactory.ParseName( " Microsoft.VisualStudio.TestTools.UnitTesting" ) ) )
					.Add( SyntaxFactory.UsingDirective( SyntaxFactory.ParseName( " " + namespaceName ) ) );
					

					var compilationUnit = SyntaxFactory.CompilationUnit()
					.WithUsings( usings )
					.WithMembers( new SyntaxList<MemberDeclarationSyntax>().Add( namespaceDeclaration ) )
					.NormalizeWhitespace();

					fileCodePairs.Add( className + "Test.cs", compilationUnit.ToFullString() );
				}

			}
			return fileCodePairs;
		}
		
	}
}
