using Microsoft.VisualStudio.TestTools.UnitTesting;
using TestGenerator.Core;

namespace TestGenerator.Tests
{
	[TestClass]
	public class CoreTests
	{


		[TestMethod]
		public void GenerateNormalTest()
		{
			var code = @"
				namespace MyCode
				{
					public class MyClass
					{
						public int Multiply(int x, int y)
						{
							return x * y;
						}

						public int Sum( int x, int y)
						{
							return x + y;
						}

						public void DoNothing()					
						{}
					}
				}
				";

			var testGenerator = new MsTestGenerator();
			var fileCodePairs = testGenerator.Generate( code );
			

			Assert.AreEqual( 1, fileCodePairs.Count );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassTest.cs" ) );
			var testCode = fileCodePairs[ "MyClassTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyCode;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyCode.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassTest" ) );
			Assert.IsTrue( testCode.Contains( "public void MultiplyTest()" ) );
			Assert.IsTrue( testCode.Contains( "public void SumTest()" ) );
			Assert.IsTrue( testCode.Contains( "public void DoNothingTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );

		}
		[TestMethod]
		public void GenerateOverloadedMethodsTest()
		{
			var code = @"
				namespace MyCode
				{
					public class MyClass
					{
						public int Multiply(int x, int y)
						{
							return x * y;
						}

						public int Multiply(int x, int y, int z)
						{
							return x * y % z;
						}

						public int Sum( int x, int y)
						{
							return x + y;
						}

						public void DoNothing()					
						{}
					}
				}
				";

			var testGenerator = new MsTestGenerator();
			var fileCodePairs = testGenerator.Generate( code );

			Assert.AreEqual( 1, fileCodePairs.Count );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassTest.cs" ) );
			var testCode = fileCodePairs[ "MyClassTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyCode;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyCode.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassTest" ) );
			Assert.IsFalse( testCode.Contains( "public void MultiplyTest()" ) );
			Assert.IsTrue( testCode.Contains( "public void Multiply1Test()" ) );
			Assert.IsTrue( testCode.Contains( "public void Multiply2Test()" ) );
			Assert.IsTrue( testCode.Contains( "public void SumTest()" ) );
			Assert.IsTrue( testCode.Contains( "public void DoNothingTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );

		}

		[TestMethod]
		public void GenerateOneNamespaceManyClassesTest()
		{
			var code = @"
			namespace MyCode
			{
				public class MyClassMulty
				{
					public int Multiply(int x, int y)
					{
						return x * y;
					}
				}

				public class MyClassSum
				{
					public int Sum(int x, int y)
					{
						return x + y;
					}
				}

				public class MyClassNothing
				{
					public void DoNothing()
					{						
					}
				}

			}
			";

			var testGenerator = new MsTestGenerator();
			var fileCodePairs = testGenerator.Generate( code );

			Assert.AreEqual( 3, fileCodePairs.Count );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassMultyTest.cs" ) );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassSumTest.cs" ) );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassNothingTest.cs" ) );
			
			var testCode = fileCodePairs[ "MyClassMultyTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyCode;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyCode.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassMultyTest" ) );
			Assert.IsTrue( testCode.Contains( "public void MultiplyTest()" ) );				
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );


			testCode = fileCodePairs[ "MyClassSumTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyCode;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyCode.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassSumTest" ) );
			Assert.IsTrue( testCode.Contains( "public void SumTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );


			testCode = fileCodePairs[ "MyClassNothingTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyCode;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyCode.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassNothingTest" ) );
			Assert.IsTrue( testCode.Contains( "public void DoNothingTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );
		}

		[TestMethod]
		public void GenerateManyNamespacesTest()
		{
			var code = @"
				namespace MyAriphmetics
				{
					public class MyClassMulty
					{
						public int Multiply(int x, int y)
						{
							return x * y;
						}
					}

					public class MyClassSum
					{
						public int Sum(int x, int y)
						{
							return x + y;
						}
					}
				}

				namespace MyNothing
				{
					public class MyClassNothing
					{
						public void DoNothing()
						{						
						}
					}
				}

				namespace MyFooBarNamespace
				{
					public class Foo
					{
						public int Baz(int x)
						{
							return x * x;
						}
					}

					public class Bar
					{
						public void Inner(int r)
						{
							int x = r * r;
						}
					}
				}
				";
			var testGenerator = new MsTestGenerator();
			var fileCodePairs = testGenerator.Generate( code );


			Assert.AreEqual( 5, fileCodePairs.Count );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassMultyTest.cs" ) );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassSumTest.cs" ) );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassNothingTest.cs" ) );
			Assert.IsTrue( fileCodePairs.ContainsKey( "FooTest.cs" ) );
			Assert.IsTrue( fileCodePairs.ContainsKey( "BarTest.cs" ) );


			var testCode = fileCodePairs[ "MyClassMultyTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyAriphmetics;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyAriphmetics.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassMultyTest" ) );
			Assert.IsTrue( testCode.Contains( "public void MultiplyTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );


			testCode = fileCodePairs[ "MyClassSumTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyAriphmetics;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyAriphmetics.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassSumTest" ) );
			Assert.IsTrue( testCode.Contains( "public void SumTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );


			testCode = fileCodePairs[ "MyClassNothingTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyNothing;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyNothing.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassNothingTest" ) );
			Assert.IsTrue( testCode.Contains( "public void DoNothingTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );


			testCode = fileCodePairs[ "FooTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyFooBarNamespace;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyFooBarNamespace.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class FooTest" ) );
			Assert.IsTrue( testCode.Contains( "public void BazTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );


			testCode = fileCodePairs[ "BarTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyFooBarNamespace;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyFooBarNamespace.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class BarTest" ) );
			Assert.IsTrue( testCode.Contains( "public void InnerTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );
		}

		[TestMethod]
		public void GeneratePrivateMethodTest()
		{
			var code = @"
				namespace MyCode
				{
					public class MyClass
					{
						public int Multiply(int x, int y)
						{
							return x * y;
						}

						public int Sum( int x, int y)
						{
							return x + y;
						}

						private void DoNothing()					
						{}
					}
				}
				";

			var testGenerator = new MsTestGenerator();
			var fileCodePairs = testGenerator.Generate( code );
			

			Assert.AreEqual( 1, fileCodePairs.Count );
			Assert.IsTrue( fileCodePairs.ContainsKey( "MyClassTest.cs" ) );
			var testCode = fileCodePairs[ "MyClassTest.cs" ];
			Assert.IsTrue( testCode.Contains( "using Microsoft.VisualStudio.TestTools.UnitTesting;" ) );
			Assert.IsTrue( testCode.Contains( "using MyCode;" ) );

			Assert.IsTrue( testCode.Contains( "namespace MyCode.Test" ) );
			Assert.IsTrue( testCode.Contains( "public class MyClassTest" ) );
			Assert.IsTrue( testCode.Contains( "public void MultiplyTest()" ) );
			Assert.IsTrue( testCode.Contains( "public void SumTest()" ) );
			Assert.IsFalse( testCode.Contains( "DoNothingTest()" ) );
			Assert.IsTrue( testCode.Contains( "Assert.Fail(\"autogenerated\")" ) );

		}
	}
}